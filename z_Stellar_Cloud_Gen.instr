nebconfigbegin
ksmps,64
-B,512
-b,128
sr,48000
freeze,latching,rising
reset,latching,rising
source,latching,falling
file,incremental,falling
record,latching,rising
nebconfigend

; Stellar Cloud Generator
; Author: Rick Howell
; rick.howell.arts@gmail.com
; __________________________


; Grain Window
giwindowtablesize = 512
giHamming   ftgen   0, 0, giwindowtablesize, 20, 9, 1  

instr 1

ainl, ainr inch 1, 2

; __________________________
; _______Initial Vars_______
; __________________________

imax_delay  = 4.0           ; Arbitrary 
imin_delay  = 0.001953125   ; Arbitrary (2^(-9))

imax_cutoff = 18000.0
imin_cutoff = 20.0
imax_res    = 100.0
imin_res    = 1.0
ifinal_hp   = 2048.0

idelScale   = 1.0
imeth       = 2             ; clipping method (tanh)
ilimit      = 0.9

aoutl init 0
aoutr init 0
asourceL init 0
asourceR init 0
awetSourceL init 0
awetSourceR init 0

; __________________________
; ______Control Setup_______
; __________________________

if gkblend > 0.995 then
    gkblend = 1
endif

;    __controlmap__
kdrywetmix      = gkoverlap

ksmpStart       = gkloopstart
ksmpSpeed       = gkspeed
ksmpSize        = gkloopsize

kdlyFb          = gkdensity
kdlyTime        = gkpitch
kdlyStereo      = gkdensity_alt

kfltC           = gkblend
kfltQ           = gkwindow
khpF            = gkblend_alt

; for selecting filter types
kfltBit0        = gkfreeze
kfltBit1        = gkreset

; 0 -> pre-delay filtering
; 1 -> post-delay filtering
kfltPos         = gkrecord

; 1 -> filtering is apllied to dry signal
kfltDry         = gkrecord_alt   

; 0 -> ping pong delay
; 1 -> true stereo delay
kfltStMode      = gkfreeze_alt

; __Filter Setup__

kfilterType = 0

if kfltBit1 == 0 && kfltBit0 == 0 then
    kfilterType = 0
elseif kfltBit1 == 0 && kfltBit0 == 1 then
    kfilterType = 1
elseif kfltBit1 == 1 && kfltBit0 == 0 then
    kfilterType = 2
elseif kfltBit1 == 1 && kfltBit0 == 1 then
    kfilterType = 3
endif

; cutoff in Hz
kfltCScaled = kfltC * kfltC * kfltC
kcf = (imin_cutoff * (1-kfltCScaled)) + (imax_cutoff * kfltCScaled)
; resonance in ???
kfltQScaled = imin_res + (kfltQ * kfltQ * kfltQ * (imax_res - imin_res))
kq = kfltQScaled
; bandwidth
kbw = ((1 - kfltQ) * 4096.0) + 128.0
; phaser order, 6 notches
iorder = 12
kphsfb = (kfltQ * 2) - 1

; __________________________
; ____Grain / Live Mode_____
; __________________________

; generates right channel ftables for stereo files
gkfilesel_offset = 399
gifile_right_offset = 599
itempidx = 0
loop:
    if gichn[itempidx] == 2 then
        giwoffset = itempidx + gifile_right_offset
        giwoffset ftgen (itempidx+gifile_right_offset), 0, 0, 1, gSname[itempidx], 0, 0, 2
    endif
    itempidx += 1
    if (itempidx < 100) igoto loop

; __________________________
; _______Grain Maker________
; __________________________

kfn         = gkfilesel + gkfilesel_offset + 1

kcps        = ksmpSpeed * ksmpSpeed
aphasor     phasor kcps

kstart      portk ksmpStart, 0.1
astart      = a(kstart)
klen        portk ksmpSize, 0.1
alength     = a((klen * 2) - 1)

andx        = astart + (aphasor * alength)
ixmode      = 1
ixoff       = 0
iwrap       = 1

atab        tablekt  andx, kfn, ixmode, ixoff, iwrap

if gksource == 0 then
    asourceL = atab
    asourceR = atab
else
    asourceL = ainl
    asourceR = ainr
endif

; __________________________
; _______Pre Filter________
; __________________________

adrySourceL = asourceL
adrySourceR = asourceR

alowL rezzy asourceL, kcf, kq, 0
alowR rezzy asourceR, kcf, kq, 0

abandL butterbp asourceL, kcf, kbw
abandR butterbp asourceR, kcf, kbw

ahighL rezzy asourceL, kcf, kq, 1
ahighR rezzy asourceR, kcf, kq, 1

aphsL phaser1 asourceL, kcf, iorder, kphsfb
aphsR phaser1 asourceR, kcf, iorder, kphsfb

; Filter Select
; __________________________

if kfilterType == 0 then
    asourceL = alowL * idelScale
    asourceR = alowR * idelScale
elseif kfilterType == 1 then
    asourceL = abandL * idelScale
    asourceR = abandR * idelScale
elseif kfilterType == 2 then
    asourceL = ahighL * idelScale
    asourceR = ahighR * idelScale
else
    asourceL = aphsL * idelScale
    asourceR = aphsR * idelScale
endif

awetSourceL = asourceL
awetSourceR = asourceR

; __________________________
; __________Delay___________
; __________________________

adlyInL init 0
adlyInR init 0

if kfltPos == 0 then
    adlyInL = awetSourceL
    adlyInR = awetSourceR
else
    adlyInL = adrySourceL
    adlyInR = adrySourceR
endif

; Probably not worth it to make the stereo control bipolar
; If you want a different polarity, you can flip the output cables

kinTime portk kdlyTime, 0.1

; make delay time
; Note, deltap takes values in seconds
ktime = (imin_delay * (1 - (kinTime * kinTime))) + (imax_delay * kinTime * kinTime)

; kdelayTime portk ktime, 0.1
kdelayTime = ktime

; process stereo control
; push back right channel
; __________________________
;kOffsetScale = sin($M_PI_2 * kdlyStereo)
kOffsetScale = kdlyStereo
;kOffsetTime portk (kOffsetScale * kdelayTime), 0.01
kOffsetTime = kOffsetScale * kdelayTime
aOffsetTime = a(kOffsetTime)

if kdlyStereo > 0.0015 then
    adump delayr imax_delay
    asourceROffset deltapi aOffsetTime
    delayw adlyInR
else
    asourceROffset = adlyInR
endif


; __main delay processing__
; __________________________

adelayTime = a(kdelayTime)

adump delayr imax_delay
adlyL deltapi adelayTime

adump delayr imax_delay
adlyR deltapi adelayTime

; Delay
; __________________________
kfdbk_amount = kdlyFb

if kfltStMode == 0 then
    afdbkL = adlyInL + kfdbk_amount * adlyR
    afdbkR = asourceROffset + kfdbk_amount * adlyL
else
    afdbkL = adlyInL + kfdbk_amount * adlyL
    afdbkR = asourceROffset + kfdbk_amount * adlyR
endif

delayw afdbkL
delayw afdbkR

; __________________________
; _______Post Filter________
; __________________________

if kfltPos == 1 then
    alowL rezzy afdbkL, kcf, kq, 0
    alowR rezzy afdbkR, kcf, kq, 0

    abandL butterbp afdbkL, kcf, kbw
    abandR butterbp afdbkR, kcf, kbw

    ahighL rezzy afdbkL, kcf, kq, 1
    ahighR rezzy afdbkR, kcf, kq, 1

    aphsL phaser1 afdbkL, kcf, iorder, kphsfb
    aphsR phaser1 afdbkR, kcf, iorder, kphsfb

    ; Filter Select
    ; __________________________

    if kfilterType == 0 then
        aFiltDelayL = alowL * idelScale
        aFiltDelayR = alowR * idelScale
    elseif kfilterType == 1 then
        aFiltDelayL = abandL * idelScale
        aFiltDelayR = abandR * idelScale
    elseif kfilterType == 2 then
        aFiltDelayL = ahighL * idelScale
        aFiltDelayR = ahighR * idelScale
    else
        aFiltDelayL = aphsL * idelScale
        aFiltDelayR = aphsR * idelScale
    endif
else
    aFiltDelayL = afdbkL
    aFiltDelayR = afdbkR
endif



; __________________________
; __________Mixer___________
; __________________________

if kfltDry == 0 then
    aoutl = (adrySourceL * (1.0-kdrywetmix)) + (aFiltDelayL * kdrywetmix)
    aoutr = (adrySourceR * (1.0-kdrywetmix)) + (aFiltDelayR * kdrywetmix)
else
    aoutl = (awetSourceL * (1.0-kdrywetmix)) + (aFiltDelayL * kdrywetmix)
    aoutr = (awetSourceR * (1.0-kdrywetmix)) + (aFiltDelayR * kdrywetmix)
endif

; final hp
kHpFreq = khpF * ifinal_hp
aoutl butterhp aoutl, kHpFreq 
aoutr butterhp aoutr, kHpFreq 

; clip
aoutl clip aoutl, imeth, ilimit
aoutr clip aoutr, imeth, ilimit

outs aoutl, aoutr

endin
