nebconfigbegin
ksmps,64
-B,512
-b,128
sr,48000
freeze,latching,rising
reset,latching,rising
source,latching,falling
file,incremental,falling
record,latching,rising
nebconfigend

; Stellar Cloud Generator
; Author: Rick Howell
; rick.howell.arts@gmail.com
; __________________________

instr 1

ainl, ainr inch 1, 2

; __________________________
; _______Initial Vars_______
; __________________________

imax_delay  = 4.0           ; Arbitrary 
imin_delay  = 0.001953125   ; Arbitrary (2^(-9))

imax_cutoff = 18000.0
imin_cutoff = 20.0
imax_res    = 100.0
imin_res    = 1.0
kmax_phsr   = 0.8
ifinal_hp   = 2048.0

idelScale   = 1.0
imeth       = 2             ; clipping method (tanh)
ilimit      = 0.9           ; Arbitrary

ksmooth     = 0.1

aoutl init 0
aoutr init 0
asourceL init 0
asourceR init 0
awetSourceL init 0
awetSourceR init 0

; __________________________
; ______Control Setup_______
; __________________________

if gkblend > 0.995 then
    gkblend = 1
endif

;    __controlmap__
kdrywetmix      = gkoverlap

ksmpVol         = gkloopstart_alt
kinVol          = gkdensity_alt

ksmpStart       = gkloopstart
ksmpPitch       = gkpitch
ksmpSize        = gkloopsize
ksmpSpeed       = gkspeed

kdlyFb          = gkdensity
kdlyStereo      = gkoverlap_alt

kfltC           = gkblend
kfltQ           = gkwindow
khpF            = gkblend_alt

kmute           = gksource

; for selecting filter types
kfltBit0        = gkfreeze
kfltBit1        = gkreset

; 0 -> pre-delay filtering
; 1 -> post-delay filtering
kfltPos         = gkrecord

; 1 -> filtering is applied to dry signal
kfltDry         = gkrecord_alt   

; 0 -> ping pong delay
; 1 -> true stereo delay
kfltStMode      = gkfreeze_alt

; __Filter Setup__

kfilterType = 0

if kfltBit1 == 0 && kfltBit0 == 0 then
    kfilterType = 0
elseif kfltBit1 == 0 && kfltBit0 == 1 then
    kfilterType = 1
elseif kfltBit1 == 1 && kfltBit0 == 0 then
    kfilterType = 2
elseif kfltBit1 == 1 && kfltBit0 == 1 then
    kfilterType = 3
endif

; cutoff in Hz
kfltCScaled = kfltC * kfltC * kfltC
kcf = (imin_cutoff * (1-kfltCScaled)) + (imax_cutoff * kfltCScaled)
acf = a(kcf)
; resonance in ???
kfltQScaled = imin_res + (kfltQ * kfltQ * kfltQ * (imax_res - imin_res))
kq = kfltQScaled
aq = a(kq)
; bandwidth
kbw = ((1 - kfltQ) * 4096.0) + 128.0
abw = a(kbw)
; phaser order, 6 notches
iorder = 12
kphsfb = (kfltQ * kmax_phsr * 2) - kmax_phsr

; generates right channel ftables for stereo files
gkfilesel_offset = 399
gifile_right_offset = 599
itempidx = 0
loop:
    if gichn[itempidx] == 2 then
        giwoffset = itempidx + gifile_right_offset
        giwoffset ftgen (itempidx+gifile_right_offset), 0, 0, 1, gSname[itempidx], 0, 0, 2
    endif
    itempidx += 1
    if (itempidx < 100) igoto loop

; __________________________
; _______Source Maker_______
; __________________________

; pitch setting
ilogmax = log(32.00)
ilogmin = log(1.0)
kfactor = exp(ksmpPitch * (ilogmax - ilogmin) + ilogmin)
kpitch = 0.125 * kfactor
if kpitch <= 1.005 && kpitch >= 0.995 then
    kpitch = 1.0
endif

; time pos setting
kfilesr = gisr[gkfilesel]
kfilelen = gilen[gkfilesel]
kfilesamps = (kfilelen * kfilesr) * (sr / kfilesr)
kpeakamp = gipeak[gkfilesel]
klen = kfilelen; * (kfilesr / sr); Length of Current File in seconds
kglen = kfilesamps / sr

kconvertedlen = (klen * (kfilesr / sr))
kloopstart = (ksmpStart * kconvertedlen)
kloopscalar = ksmpSize
kloopsize = ((kloopscalar * kloopscalar) * (kconvertedlen-kloopstart))
if (kloopsize <= 0.000035) then 
	kloopsize = 0.000035
endif

kspeed = (ksmpSpeed * 8.0) - 4.0
if abs(kspeed) <= 1.025 && abs(kspeed) >= 0.975 then
    if kspeed > 0 then
        kspeed = 1.0
    else
        kspeed = -1.0
    endif
endif

kphasorfreq = ((1 / kloopsize) * kspeed) * (kfilesr / sr)
if kphasorfreq > sr then
    kphasorfreq = sr
endif

aphs phasor kphasorfreq
atime = kloopstart + (kloopsize * aphs)

kfn         = gkfilesel + gkfilesel_offset + 1
atimpt      = atime
kamp        = 1
klock       = 1
ktabL       = kfn

atabL       mincer atimpt, kamp, kpitch, ktabL, klock

knumchn = gichn[gkfilesel]
if knumchn == 2 then
    ktabR   = gifile_right_offset + gkfilesel
    atabR   mincer atimpt, kamp, kpitch, ktabR, klock
else 
    atabR   = atabL
endif

asourceL = (atabL * ksmpVol) + (ainl * kinVol)
asourceR = (atabR * ksmpVol) + (ainr * kinVol)

asourceL = tanh(asourceL)
asourceR = tanh(asourceR)

; __________________________
; _______Pre Filter________
; __________________________

adrySourceL = asourceL
adrySourceR = asourceR

alowL rezzy asourceL, acf, aq, 0
alowR rezzy asourceR, acf, aq, 0

abandL butterbp asourceL, acf, abw
abandR butterbp asourceR, acf, abw

ahighL rezzy asourceL, acf, aq, 1
ahighR rezzy asourceR, acf, aq, 1

aphsL phaser1 asourceL, kcf, iorder, kphsfb
aphsR phaser1 asourceR, kcf, iorder, kphsfb

; Filter Select
; __________________________

if kfilterType == 0 then
    asourceL = alowL * idelScale
    asourceR = alowR * idelScale
elseif kfilterType == 1 then
    asourceL = abandL * idelScale
    asourceR = abandR * idelScale
elseif kfilterType == 2 then
    asourceL = ahighL * idelScale
    asourceR = ahighR * idelScale
else
    asourceL = aphsL * idelScale
    asourceR = aphsR * idelScale
endif

awetSourceL = asourceL
awetSourceR = asourceR

; __________________________
; __________Reverb__________
; __________________________

adlyInL init 0
adlyInR init 0

if kfltPos == 0 then
    adlyInL = awetSourceL
    adlyInR = awetSourceR
else
    adlyInL = adrySourceL
    adlyInR = adrySourceR
endif

israte      = sr
ipitchm     = 1.0
iskip       = 0

kfblvl      = tanh(3 * kdlyFb)
kfco        = 18000.0

afdbkL, afdbkR reverbsc adlyInL, adlyInR, kfblvl, kfco, israte, ipitchm, iskip

; outputs are afdbkL and afdbkR

; __________________________
; _______Post Filter________
; __________________________

if kfltPos == 1 then
    adrySourceL = asourceL
    adrySourceR = asourceR

    alowL rezzy asourceL, acf, aq, 0
    alowR rezzy asourceR, acf, aq, 0

    abandL butterbp asourceL, acf, abw
    abandR butterbp asourceR, acf, abw

    ahighL rezzy asourceL, acf, aq, 1
    ahighR rezzy asourceR, acf, aq, 1

    aphsL phaser1 asourceL, kcf, iorder, kphsfb
    aphsR phaser1 asourceR, kcf, iorder, kphsfb

    ; Filter Select
    ; __________________________

    if kfilterType == 0 then
        aFiltDelayL = alowL * idelScale
        aFiltDelayR = alowR * idelScale
    elseif kfilterType == 1 then
        aFiltDelayL = abandL * idelScale
        aFiltDelayR = abandR * idelScale
    elseif kfilterType == 2 then
        aFiltDelayL = ahighL * idelScale
        aFiltDelayR = ahighR * idelScale
    else
        aFiltDelayL = aphsL * idelScale
        aFiltDelayR = aphsR * idelScale
    endif
else
    aFiltDelayL = afdbkL
    aFiltDelayR = afdbkR
endif

; __________________________
; __________Mixer___________
; __________________________

if kfltDry == 0 then
    aoutl = (adrySourceL * (1.0-kdrywetmix)) + (aFiltDelayL * kdrywetmix)
    aoutr = (adrySourceR * (1.0-kdrywetmix)) + (aFiltDelayR * kdrywetmix)
else
    aoutl = (awetSourceL * (1.0-kdrywetmix)) + (aFiltDelayL * kdrywetmix)
    aoutr = (awetSourceR * (1.0-kdrywetmix)) + (aFiltDelayR * kdrywetmix)
endif

; final hp
kHpFreq = khpF * ifinal_hp
aoutl butterhp aoutl, kHpFreq 
aoutr butterhp aoutr, kHpFreq 

; clip
/*
aoutl clip aoutl, imeth, ilimit
aoutr clip aoutr, imeth, ilimit
*/

aoutl   = tanh(aoutl)
aoutr   = tanh(aoutr)

; mute
if kmute == 1 then
    aoutl = 0
    aoutr = 0
endif

outs aoutl, aoutr

endin
